import asyncio
import tkinter as tk
from tkinter import Tk, ttk, filedialog, messagebox, Widget, StringVar, IntVar, DoubleVar, BooleanVar, Text, Image

from tkinter.font import Font
from tkinter.messagebox import askyesno
from tkinter.ttk import *
import tkinter.scrolledtext as tkst
from PIL import Image, ImageTk
from datetime import datetime

start = datetime.now()

width = 800
height = 500
app = Tk()
app.title('Sniper bot. @Web3devs')
app.geometry(f'{width}x{height}')
# app.resizable(False, False)
font = Font(family='Helvetica', size=14)
font2 = Font(family='Helvetica', size=12)


async def get_current_time_loop():
    while True:
        await asyncio.sleep(1)
        current_time = datetime.now()
        time_delta = (current_time - start).total_seconds()
        time_format = f"{int(time_delta // 60):02} min :{int(time_delta % 60):02} seconds "

        return time_format
        # current_time_label.config(text=current_time_str)


class SnipeWidget(Widget):
    def __init__(self, **kwargs):
        super(SnipeWidget, self).__init__(**kwargs)
        self.wallet_address = StringVar()
        self.wallet_private_key = StringVar()
        self.balance = DoubleVar()
        self.buy_token = StringVar()
        self.sell_token = StringVar()
        self.amount = DoubleVar()
        self.gas_limit = IntVar()
        self.gas_price = IntVar()
        self.profit_percent = IntVar()
        self.stop_loss_percent = IntVar()
        self.buy_auto_sell = BooleanVar()
        self.WalletAddressLabel = Label(app, text='Wallet Address:', font=font, width=20)
        self.WalletAddressLabel.grid(row=0, column=0)
        self.WalletAddressLabel.place(x=10, y=10)
        self.WalletAddressLabel.size = (100, 100)
        self.WalletAddress = Entry(app, font=font, width=22, textvariable=self.wallet_address)
        self.WalletAddress.grid(row=0, column=1)
        self.WalletAddress.place(x=150, y=10)
        self.WalletAddress.size = (200, 200)
        self.PrivateKeylabel = Label(app, text='Private Key:', font=font, width=20)
        self.PrivateKeylabel.grid(row=0, column=2)
        self.PrivateKeylabel.place(x=420, y=10)
        self.PrivateKeylabel.size = (100, 100)
        self.PrivateKey = Entry(app, font=font, width=22, textvariable=self.wallet_private_key)
        self.PrivateKey.grid(row=0, column=3)
        self.PrivateKey.place(x=530, y=10)
        self.BuyTokenLabel = Label(app, text='Buy Token:', font=font, width=20)
        self.BuyTokenLabel.grid(row=1, column=0)
        self.BuyTokenLabel.place(x=10, y=50)
        self.BuyTokenLabel.size = (100, 100)
        self.BuyToken = Entry(app, font=font, width=22, textvariable=self.buy_token)
        self.BuyToken.grid(row=1, column=1)
        self.BuyToken.place(x=150, y=50)
        self.BuyToken.size = (200, 200)
        self.SellTokenLabel = Label(app, text='Sell Token:', font=font, width=20)
        self.SellTokenLabel.grid(row=1, column=2)
        self.SellTokenLabel.place(x=420, y=50)
        self.SellTokenLabel.size = (100, 100)
        self.SellToken = Entry(app, font=font, width=22, textvariable=self.sell_token)
        self.SellToken.grid(row=1, column=3)
        self.SellToken.place(x=530, y=50)
        """class Logo(Widget):
        LogoLabel = Label(app, text='Sniper Bot', font=font, width=20)
        LogoLabel.grid(row=3, column=0)
        LogoLabel.place(x=10, y=450)
        LogoLabel.size = (100, 100)
        Logo = ImageTk.PhotoImage(Image.open('logo.png'), width=150, height=150)
        LogoLabel.configure(image=Logo)
        """
        self.LogsLabel = Label(app, text='Logs:', font=font)
        self.LogsLabel.grid(row=2, column=0)
        self.LogsLabel.place(x=10, y=120)
        self.LogsLabel.size = (100, 100)
        self.Logs = tkst.ScrolledText(app, width=55, height=20, font=('Arial', 10), wrap=tk.WORD, bg='#1B2226', foreground='#f5f5f5', borderwidth=1)
        self.Logs.grid(row=3, column=0)
        self.Logs.place(x=10, y=150)
        self.Logs.configure(foreground='#FFFFFF')
        self.Logs.insert(tk.END, 'Logs\n')
        self.SnipeButton = Button(app, text='Snipe', command=self.start_sniping, font=font)
        self.SnipeButton.grid(row=1, column=4)
        self.SnipeButton.place(x=440, y=height-50)
        self.SnipeButton.size = (100, 100)
        self.SellButton = Button(app, text='Sell All')
        self.SellButton.grid(row=1, column=5)
        self.SellButton.place(x=550, y=height-50)
        self.SellButton.size = (100, 100)
        try:
            self.SellButton.configure(command=lambda: self.Logs.insert(tk.END, 'Sell All\n'))
            print('Sell All button is working')
        except Exception as e:
            print(e)
        self.BalanceLabel = Label(app, text='Balance:', font=font, anchor='w', width=20)
        self.BalanceLabel.grid(row=2, column=2)
        self.BalanceLabel.place(x=420, y=150)
        self.BalanceLabel.size = (100, 100)
        self.Balance = Label(app, text='0.984660994', font=font2)
        self.Balance.grid(row=2, column=3)
        self.Balance.place(x=550, y=150)
        self.Balance.size = (100, 100)
        self.ProcessTime = Label(app, text='Process Time:', font=('Arial', 12), width=20)
        self.ProcessTime.grid(row=2, column=4)
        self.ProcessTime.place(x=420, y=180)
        self.ProcessTime.size = (100, 100)
        self.ProcessTimeValue = Label(app, text='0.984660994', font=('Arial', 12))
        self.ProcessTimeValue.grid(row=2, column=5)
        self.ProcessTimeValue.place(x=550, y=180)
        self.ProcessTimeValue.size = (100, 100)
        self.GasLimitLabel = Label(app, text='Gas:', font=font2, anchor='w', width=20)
        self.GasLimitLabel.grid(row=2, column=3)
        self.GasLimitLabel.place(x=420, y=210)
        self.GasLimitLabel.size = (100, 100)
        self.GasLimit = Spinbox(app, font=font2, width=10, from_=21000, textvariable=self.gas_limit)
        self.GasLimit.grid(row=3, column=3)
        self.GasLimit.place(x=550, y=210)
        self.GasLimit.size = (200, 200)
        self.GasPriceLabel = Label(app, text='Gas Price:', font=font2, width=10)
        self.GasPriceLabel.grid(row=4, column=3)
        self.GasPriceLabel.place(x=420, y=240)
        self.GasPriceLabel.size = (100, 100)
        self.GasPriceEntry = Spinbox(app, font=font2, from_=5, width=10, textvariable=self.gas_price)
        self.GasPriceEntry.grid(row=5, column=3)
        self.GasPriceEntry.place(x=550, y=240)
        self.GasPriceEntry.size = (200, 200)
        self.AmountLabel = Label(app, text='Amount:', font=font2, anchor='w', width=10)
        self.AmountLabel.grid(row=2, column=7)
        self.AmountLabel.place(x=420, y=270)
        self.AmountLabel.size = (100, 100)
        self.Amount = Spinbox(app, font=font2, width=10, from_=0, textvariable=self.amount)
        self.Amount.grid(row=2, column=8)
        self.Amount.place(x=550, y=270)
        self.Amount.size = (200, 200)
        self.TimeLabel = Label(app, text='Time:', font=font2, width=10)
        self.TimeLabel.grid(row=2, column=9)
        self.TimeLabel.place(x=420, y=300)
        self.TimeLabel.size = (100, 100)
        self.Time = Entry(app, font=font2, width=10)
        self.Time.grid(row=2, column=10)
        self.Time.place(x=550, y=300)
        self.Time.size = (200, 200)
        self.TakeProfit = Label(app, text='Take Profit:', font=font2, width=10)
        self.TakeProfit.grid(row=2, column=9)
        self.TakeProfit.place(x=420, y=330)
        self.TakeProfit.size = (100, 100)
        self.TakeProfitEntry = Spinbox(app, font=font2, width=10, from_=0, textvariable=self.profit_percent)
        self.TakeProfitEntry.grid(row=2, column=10)
        self.TakeProfitEntry.place(x=550, y=330)
        self.TakeProfitEntry.size = (200, 200)
        self.StopLoss = Label(app, text='Stop Loss:', font=font2, width=10)
        self.StopLoss.grid(row=2, column=11)
        self.StopLoss.place(x=420, y=360)
        self.StopLoss.size = (100, 100)
        self.StopLossEntry = Spinbox(app, font=font2, from_=0, to=10, width=10, textvariable=self.stop_loss_percent)
        self.StopLossEntry.grid(row=2, column=12)
        self.StopLossEntry.place(x=550, y=360)
        self.StopLossEntry.size = (200, 200)
        self.checkbox = Checkbutton(app, text='Auto sell', variable=self.buy_auto_sell)
        self.checkbox.grid(row=2, column=13)
        self.checkbox.place(x=420, y=400)
        self.checkbox.size = (200, 200)
        self.ExitButton = Button(app, text='Exit')
        self.ExitButton.grid(row=1, column=6)
        self.ExitButton.place(x=650, y=height-50)
        self.ExitButton.size = (100, 100)
        self.ExitButton.configure(command=lambda: exit() if askyesno(title='Confirmation', message='Are you sure that you want to quit?') else None)

    def get_balance(self):
        try:
            print('Balance button is working')
            print(self.wallet_address.get())
            print(self.wallet_private_key.get())
            print(self.buy_token.get())
            print(self.sell_token.get())
            print(self.amount.get())
            print(self.gas_limit.get())
            print(self.gas_price.get())
            print(self.profit_percent.get())
            print(self.stop_loss_percent.get())
            print(self.buy_auto_sell.get())
            # print(self.time)

        except Exception as e:
            print(e)


end = datetime.now()
time = end - start
print(time)
loop = asyncio.get_event_loop()
loop.run_until_complete(get_current_time_loop())
loop.close()

if __name__ == '__main__':
    app.mainloop()

